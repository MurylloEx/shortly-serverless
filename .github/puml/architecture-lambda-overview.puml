@startuml "AWS Architecture Diagram"

title "Shortly Architecture - Request Flow"

!define AWSPUML https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist

!include AWSPUML/AWSCommon.puml
!include AWSPUML/General/User.puml
!include AWSPUML/General/Users.puml
!include AWSPUML/Groups/Region.puml
!include AWSPUML/Groups/AWSCloud.puml
!include AWSPUML/Compute/Lambda.puml
!include AWSPUML/Database/DynamoDB.puml
!include AWSPUML/Storage/SimpleStorageService.puml
!include AWSPUML/DeveloperTools/CloudDevelopmentKit.puml
!include AWSPUML/ManagementGovernance/CloudWatch.puml
!include AWSPUML/ManagementGovernance/CloudFormation.puml
!include AWSPUML/ManagementGovernance/CloudFormationStack.puml
!include AWSPUML/NetworkingContentDelivery/CloudFront.puml
!include AWSPUML/NetworkingContentDelivery/Route53.puml
!include AWSPUML/ApplicationIntegration/APIGateway.puml
!include AWSPUML/ApplicationIntegration/APIGatewayEndpoint.puml
!include AWSPUML/SecurityIdentityCompliance/CertificateManager.puml

left to right direction

User(MyEngineer, "Engenheiro", "Quem desenvolve as funcionalidades e mantém o sistema")
Users(MyUsers, "Usuários", "Quem utiliza e interage com o sistema")

AWSCloudGroup(cloud) {
  RegionGroup(region) {
    CloudDevelopmentKit(MyCDK, "SST/SDK", "Permite a criação de infraestrutura em nuvem por meio de código")
    CloudFormation(MyCloudFormation, "Gestor das Stacks", "Provisiona e gerencia recursos de nuvem de forma declarativa, utilizando templates em formato JSON ou YAML")
    CloudFormationStack(MyCDKStack, "Shortly CDK Stack", "Representa o conjunto de todos os recursos gerenciados pelo CloudFormation na AWS")
    Route53(MyRoute53, "Hosted Zone", "Processa as consultas DNS aos nomes de domínio do Shortly")
    APIGateway(MyApiGateway, "Api Gateway", "Recebe, administra, filtra e encaminha as solicitações para seus devidos Endpoints")
    APIGatewayEndpoint(MyApiGatewayEndpoint, "Endpoint Lambda", "Define o método, a rota e os critérios de aceitação para invocar uma função Lambda")
    Lambda(MyLambda, "Função Lambda", "Processa a solicitação e executa a funcionalidade requisitada")
    DynamoDB(MyDynamoDB, "Banco de Dados", "Armazena os dados de forma não-relacional como um conjunto de documentos JSON")
    SimpleStorageService(MyS3, "Bucket Privado", "Repositório dos arquivos estáticos do React") 
    CloudFront(MyCloudFront, "Content Delivery Network", "Responsável por prover uma camada de cache para os recursos estáticos do React")
    CertificateManager(MyCertificateManager, "Certificado SSL", "Serviço de emissão de certificados TLS/SSL da Amazon")
    CloudWatch(MyCloudWatch, "Logs do Sistema", "Grupos de logs do API Gateway e do AWS Lambda")
  }
}

MyUsers --> MyRoute53 : Request some functionality

MyRoute53 --> MyCloudFront : Resolve to CloudFront
MyRoute53 -left-> MyApiGateway : Resolve to API Gateway

MyLambda --> MyCloudWatch : Write log
MyLambda --> MyDynamoDB : CRUD

MyCloudFront --> MyS3 : Read files
MyCloudFront --> MyCertificateManager : Use TLS/SSL certificate

MyApiGateway --> MyCloudWatch : Write log
MyApiGateway --> MyCertificateManager : Use TLS/SSL certificate
MyApiGateway --> MyApiGatewayEndpoint : Forward request
MyApiGatewayEndpoint --> MyLambda : Send API Gateway event

MyEngineer --> MyCDK : Trigger deployment pipeline
MyCDK --> MyCloudFormation : Build CDK IaC artifacts
MyCloudFormation --> MyCDKStack : Deploy CloudFormation Stack

@enduml
